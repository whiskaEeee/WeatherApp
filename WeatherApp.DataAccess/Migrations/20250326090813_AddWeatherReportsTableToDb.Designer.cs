// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherApp.DataAccess.Data;

#nullable disable

namespace WeatherApp.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250326090813_AddWeatherReportsTableToDb")]
    partial class AddWeatherReportsTableToDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WeatherApp.Models.WeatherData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CloudBaseHeight")
                        .HasColumnType("int")
                        .HasColumnName("h");

                    b.Property<int?>("Cloudiness")
                        .HasColumnType("int")
                        .HasColumnName("Облачность, %");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("Дата");

                    b.Property<double?>("DewPoint")
                        .HasColumnType("float")
                        .HasColumnName("Td");

                    b.Property<double?>("Humidity")
                        .HasColumnType("float")
                        .HasColumnName("Отн. Влажность воздуха, %");

                    b.Property<int?>("Pressure")
                        .HasColumnType("int")
                        .HasColumnName("Атм. давление, мм рт.ст.");

                    b.Property<double?>("Temperature")
                        .HasColumnType("float")
                        .HasColumnName("T");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("time(0)")
                        .HasColumnName("Время (московское)");

                    b.Property<int?>("Visibility")
                        .HasColumnType("int")
                        .HasColumnName("VV");

                    b.Property<string>("WeatherDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Погодные явления");

                    b.Property<string>("WindDirection")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Направление ветра");

                    b.Property<int?>("WindSpeed")
                        .HasColumnType("int")
                        .HasColumnName("Скорость ветра, м/с");

                    b.HasKey("Id");

                    b.ToTable("WeatherReports");
                });
#pragma warning restore 612, 618
        }
    }
}
